# =========================================
# Treafik
# Reverse proxy with automatic TLS certificate generation
# =========================================

networks:
  # Use the previously created public network "reverse-proxy", shared with other
  # services that need to be publicly available via this Traefik
  proxy-net:
    name: reverse-proxy
    external: true

volumes:
  # Use the previously created volume "certs-vol" to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  certs-vol:
    name: certs-vol
    external: true

services:
  traefik:
    image: traefik:v3.4
    container_name: traefik
    environment:
      - TZ=Asia/Ho_Chi_Minh
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true

      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      # That way you can add other internal Traefik instances per stack if needed
      - traefik.constraint-label=traefik-public

      # admin-auth middleware with HTTP Basic auth
      - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME:?Variable not set}:${HASHED_PASSWORD:?Variable not set}

      # internal-ips middleware to allow only access from internal IPs
      - traefik.http.middlewares.internal-ips.ipallowlist.sourcerange=127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,172.16.0.0/16

      # # https-redirect middleware to redirect HTTP to HTTPS
      # # It can be re-used by other stacks in other Docker Compose files
      # - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

      # Setup Traefik API anf Web UI/Dashboard using the special Traefik service api@internal
      - traefik.http.routers.traefik.entrypoints=traefik
      - traefik.http.routers.traefik.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`) || PathPrefix(`/debug`)
      #- traefik.http.routers.traefik.rule=Host(`${DOMAIN:?Variable not set}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`) || PathPrefix(`/debug`))
      - traefik.http.routers.traefik.middlewares=internal-ips,admin-auth
      - traefik.http.routers.traefik.service=api@internal
      #- traefik.http.routers.traefik.tls=true
      #- traefik.http.routers.traefik.tls.certresolver=le
      #- traefik.http.routers.traefik.tls.domains[0].main=${DOMAIN:?Variable not set}
      - traefik.http.routers.traefik.priority=62
      #- traefik.http.services.traefik-svc.loadbalancer.server.port=8080

    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - proxy-net

    ports:
      - 80:80
      - 443:443
      - 8080:8080

    restart: unless-stopped
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs-vol:/certificates

    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 5
