# =========================================
# Traefik
# Verion 2.4.x
#
# This file can be used to setup a Traefik proxy on a Docker Swarm with replication.
#
# It expects one or more virtual machines to be part of the swarm. There is a constraint to make sure that each Traefik proxy runs on a
# particular host with label `node-has-traefik=true`.
# Run `docker stack deploy <stackname> -c docker-stack.yml` on the Swarm leader to start the cluster.
#
# Requires:
# - Docker Engine 17.12.0+
# - Docker Compose 1.18.0+
# =========================================

# Networks
networks:
  # Use the previously created public network "reverse-proxy", shared with other
  # services that need to be publicly available via this Traefik
  proxy-net:
    name: reverse-proxy
    external: true

# # Secrets
# secrets:
#   linode-token:
#     name: linode-token
#     external: true

# Volumes
volumes:
  # Use the previously created volume "certs-vol" to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  certs-vol:
    name: certs-vol
    external: true

# Services
services:
  proxy:
    image: traefik:v2.8
    environment:
      - TZ=Asia/Ho_Chi_Minh
      #- LINODE_TOKEN_FILE=/run/secrets/linode-token
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.node-has-traefik == true

      labels:
        # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true

      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      # That way you can add other internal Traefik instances per stack if needed
      - traefik.constraint-label=traefik-public

      # admin-auth middleware with HTTP Basic auth
      - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME:?Variable not set}:${HASHED_PASSWORD:?Variable not set}

      # internal-ips middleware to allow only access from internal IPs
      - traefik.http.middlewares.internal-ips.ipallowlist.sourcerange=127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,172.16.0.0/16

      # # https-redirect middleware to redirect HTTP to HTTPS
      # # It can be re-used by other stacks in other Docker Compose files
      # - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

      # Setup Traefik API anf Web UI/Dashboard using the special Traefik service api@internal
      - traefik.http.routers.traefik.entrypoints=traefik
      - traefik.http.routers.traefik.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`) || PathPrefix(`/debug`)
      #- traefik.http.routers.traefik.rule=Host(`${DOMAIN:?Variable not set}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`) || PathPrefix(`/debug`))
      - traefik.http.routers.traefik.middlewares=internal-ips,admin-auth
      - traefik.http.routers.traefik.service=api@internal
      #- traefik.http.routers.traefik.tls=true
      #- traefik.http.routers.traefik.tls.certresolver=le
      #- traefik.http.routers.traefik.tls.domains[0].main=${DOMAIN:?Variable not set}
      - traefik.http.routers.traefik.priority=62
      #- traefik.http.services.traefik-svc.loadbalancer.server.port=8080

    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - proxy-net

    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - target: 80
        published: 80
        mode: host

      # Listen on port 443, default for HTTPS
      - target: 443
        published: 443
        mode: host

      # Listen on port 443, default for HTTPS
      - target: 8080
        published: 8080
        mode: host

    # secrets:
    #   - linode-token

    volumes:
      - certs-vol:/certificates
      - /var/run/docker.sock:/var/run/docker.sock:ro

    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      start_period: 10s
      interval: 3s
      timeout: 5s
      retries: 5
